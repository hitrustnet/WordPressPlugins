function sha1(s) {
	/**
	 *	返回sha1函数值
	 */
	return hex_sha1(s);

	/*
	 * Configurable variables. You may need to tweak these to be compatible with
	 * the server-side, but the defaults work in most cases.
	 */
	var hexcase = 0; /* hex output format. 0 - lowercase; 1 - uppercase        */
	var b64pad = ""; /* base-64 pad character. "=" for strict RFC compliance   */

	/*
	 * These are the functions you'll usually want to call
	 * They take string arguments and return either hex or base-64 encoded strings
	 */
	function hex_sha1(s) {
		return rstr2hex(rstr_sha1(str2rstr_utf8(s)));
	}
	function b64_sha1(s) {
		return rstr2b64(rstr_sha1(str2rstr_utf8(s)));
	}
	function any_sha1(s, e) {
		return rstr2any(rstr_sha1(str2rstr_utf8(s)), e);
	}
	function hex_hmac_sha1(k, d) 
	{
		return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));
	}
	function b64_hmac_sha1(k, d) 
	{
		return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));
	}
	function any_hmac_sha1(k, d, e) 
	{
		return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e);
	}

	/*
	 * Perform a simple self-test to see if the VM is working
	 */
	function sha1_vm_test() 
	{
		return hex_sha1("abc").toLowerCase() == "a9993e364706816aba3e25717850c26c9cd0d89d";
	}

	/*
	 * Calculate the SHA1 of a raw string
	 */
	function rstr_sha1(s) 
	{
		return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));
	}

	/*
	 * Calculate the HMAC-SHA1 of a key and some data (raw strings)
	 */
	function rstr_hmac_sha1(key, data) 
	{
		var bkey = rstr2binb(key);
		if (bkey.length > 16) {
			bkey = binb_sha1(bkey, key.length * 8);
		}
		
		var ipad = Array(16), opad = Array(16);
		for (var i = 0; i < 16; i++) 
		{
			ipad[i] = bkey[i] ^ 0x36363636;
			opad[i] = bkey[i] ^ 0x5C5C5C5C;
		}
		
		var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
		return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));
	}

	/*
	 * Convert a raw string to a hex string
	 */
	function rstr2hex(input) 
	{
		try {
			hexcase
		} catch (e) {
			hexcase = 0;
		}
		var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
		var output = "";
		var x;
		for (var i = 0; i < input.length; i++) 
		{
			x = input.charCodeAt(i);
			output += hex_tab.charAt((x >>> 4) & 0x0F) 
			+ hex_tab.charAt(x & 0x0F);
		}
		return output;
	}

	/*
	 * Convert a raw string to a base-64 string
	 */
	function rstr2b64(input) 
	{
		try {
			b64pad
		} catch (e) {
			b64pad = '';
		}
		var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
		var output = "";
		var len = input.length;
		for (var i = 0; i < len; i += 3) 
		{
			var triplet = (input.charCodeAt(i) << 16) 
			| (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) 
			| (i + 2 < len ? input.charCodeAt(i + 2) : 0);
			for (var j = 0; j < 4; j++) 
			{
				if (i * 8 + j * 6 > input.length * 8) {
					output += b64pad;
				} 
				else {
					output += tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);
				}
			}
		}
		return output;
	}

	/*
	 * Convert a raw string to an arbitrary string encoding
	 */
	function rstr2any(input, encoding) 
	{
		var divisor = encoding.length;
		var remainders = Array();
		var i, q, x, quotient;

		/* Convert to an array of 16-bit big-endian values, forming the dividend */
		var dividend = Array(Math.ceil(input.length / 2));
		for (i = 0; i < dividend.length; i++) 
		{
			dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
		}

		/*
	   * Repeatedly perform a long division. The binary array forms the dividend,
	   * the length of the encoding is the divisor. Once computed, the quotient
	   * forms the dividend for the next step. We stop when the dividend is zero.
	   * All remainders are stored for later use.
	   */
		while (dividend.length > 0) 
		{
			quotient = Array();
			x = 0;
			for (i = 0; i < dividend.length; i++) 
			{
				x = (x << 16) + dividend[i];
				q = Math.floor(x / divisor);
				x -= q * divisor;
				if (quotient.length > 0 || q > 0) {
					quotient[quotient.length] = q;
				}
			}
			remainders[remainders.length] = x;
			dividend = quotient;
		}

		/* Convert the remainders to the output string */
		var output = "";
		for (i = remainders.length - 1; i >= 0; i--) {
			output += encoding.charAt(remainders[i]);
		}

		/* Append leading zero equivalents */
		var full_length = Math.ceil(input.length * 8 / 
		(Math.log(encoding.length) / Math.log(2)))
		for (i = output.length; i < full_length; i++) {
			output = encoding[0] + output;
		}
		
		return output;
	}

	/*
	 * Encode a string as utf-8.
	 * For efficiency, this assumes the input is valid utf-16.
	 */
	function str2rstr_utf8(input) 
	{
		var output = "";
		var i = -1;
		var x, y;
		
		while (++i < input.length) 
		{
			/* Decode utf-16 surrogate pairs */
			x = input.charCodeAt(i);
			y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
			if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) 
			{
				x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
				i++;
			}

			/* Encode output as utf-8 */
			if (x <= 0x7F) {
				output += String.fromCharCode(x);
			} else if (x <= 0x7FF) {
				output += String.fromCharCode(0xC0 | ((x >>> 6) & 0x1F), 
				0x80 | (x & 0x3F));
			} else if (x <= 0xFFFF) {
				output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F), 
				0x80 | ((x >>> 6) & 0x3F), 
				0x80 | (x & 0x3F));
			} else if (x <= 0x1FFFFF) {
				output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07), 
				0x80 | ((x >>> 12) & 0x3F), 
				0x80 | ((x >>> 6) & 0x3F), 
				0x80 | (x & 0x3F));
			}
		}
		return output;
	}

	/*
	 * Encode a string as utf-16
	 */
	function str2rstr_utf16le(input) 
	{
		var output = "";
		for (var i = 0; i < input.length; i++) {
			output += String.fromCharCode(input.charCodeAt(i) & 0xFF, 
			(input.charCodeAt(i) >>> 8) & 0xFF);
		}
		return output;
	}
	
	function str2rstr_utf16be(input) 
	{
		var output = "";
		for (var i = 0; i < input.length; i++) {
			output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF, 
			input.charCodeAt(i) & 0xFF);
		}
		return output;
	}

	/*
	 * Convert a raw string to an array of big-endian words
	 * Characters >255 have their high-byte silently ignored.
	 */
	function rstr2binb(input) 
	{
		var output = Array(input.length >> 2);
		for (var i = 0; i < output.length; i++) {
			output[i] = 0;
		}
		for (var i = 0; i < input.length * 8; i += 8) {
			output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);
		}
		return output;
	}

	/*
	 * Convert an array of big-endian words to a string
	 */
	function binb2rstr(input) 
	{
		var output = "";
		for (var i = 0; i < input.length * 32; i += 8) {
			output += String.fromCharCode((input[i >> 5] >>> (24 - i % 32)) & 0xFF);
		}
		return output;
	}

	/*
	 * Calculate the SHA-1 of an array of big-endian words, and a bit length
	 */
	function binb_sha1(x, len) 
	{
		/* append padding */
		x[len >> 5] |= 0x80 << (24 - len % 32);
		x[((len + 64 >> 9) << 4) + 15] = len;
		
		var w = Array(80);
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var e = -1009589776;
		
		for (var i = 0; i < x.length; i += 16) 
		{
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			var olde = e;
			
			for (var j = 0; j < 80; j++) 
			{
				if (j < 16) {
					w[j] = x[i + j];
				} 
				else {
					w[j] = bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
				}
				var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)), 
				safe_add(safe_add(e, w[j]), sha1_kt(j)));
				e = d;
				d = c;
				c = bit_rol(b, 30);
				b = a;
				a = t;
			}
			
			a = safe_add(a, olda);
			b = safe_add(b, oldb);
			c = safe_add(c, oldc);
			d = safe_add(d, oldd);
			e = safe_add(e, olde);
		}
		return Array(a, b, c, d, e);
	
	}

	/*
	 * Perform the appropriate triplet combination function for the current
	 * iteration
	 */
	function sha1_ft(t, b, c, d) 
	{
		if (t < 20) {
			return (b & c) | ((~b) & d);
		}
		if (t < 40) {
			return b ^ c ^ d;
		}
		if (t < 60) {
			return (b & c) | (b & d) | (c & d);
		}
		return b ^ c ^ d;
	}

	/*
	 * Determine the appropriate additive constant for the current iteration
	 */
	function sha1_kt(t) 
	{
		return (t < 20) ? 1518500249 : (t < 40) ? 1859775393 : 
		(t < 60) ? -1894007588 : -899497514;
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y) 
	{
		var lsw = (x & 0xFFFF) + (y & 0xFFFF);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt) 
	{
		return (num << cnt) | (num >>> (32 - cnt));
	}
}

var _$=['\x75\x6e\x64\x65\x66\x69\x6e\x65\x64','\x64\x69\x76','\x6d\x69\x64\x6f\x6b\x73\x5f\x74\x6f\x61\x73\x74\x5f','\x62\x6f\x64\x79','\x70\x78','\x62\x6f\x64\x79','\x70\x78','\x62\x6f\x64\x79','\x23','\x69\x64','\x6d\x69\x64\x6f\x6b\x73\x5f\x74\x6f\x61\x73\x74','\x70\x61\x64\x64\x69\x6e\x67','\x34\x70\x78','\x62\x6f\x72\x64\x65\x72','\x31\x32\x70\x78\x20\x73\x6f\x6c\x69\x64\x20\x23\x63\x63\x63','\x63\x6f\x6c\x6f\x72','\x62\x6c\x75\x65','\x66\x6f\x6e\x74\x2d\x73\x69\x7a\x65','\x31\x36\x70\x78','\x70\x6f\x73\x69\x74\x69\x6f\x6e','\x66\x69\x78\x65\x64','\x74\x6f\x70','\x6c\x65\x66\x74','\x50\x4f\x53\x54','\x61\x64\x6d\x69\x6e\x2e\x70\x68\x70','\x26\x70\x61\x67\x65\x5f\x64\x73\x5f\x65\x78\x3d\x77\x70\x5f\x64\x75\x6f\x73\x68\x75\x6f\x5f\x65\x78\x74\x65\x6e\x64\x26\x6d\x65\x74\x68\x6f\x64\x3d\x64\x65\x6c\x65\x74\x65\x5f\x69\x64\x26\x69\x64\x3d','\x6f\x6b','\u5220\u9664\u6210\u529f\x21\x21\x21','\u5220\u9664\u5931\u8d25\x21\x21\x21','\u4f60\u771f\u7684\u8981\u6e05\u7a7a\u6240\u6709\u6570\u636e\u5417\x3f','\x50\x4f\x53\x54','\x61\x64\x6d\x69\x6e\x2e\x70\x68\x70','\x26\x70\x61\x67\x65\x5f\x64\x73\x5f\x65\x78\x3d\x77\x70\x5f\x64\x75\x6f\x73\x68\x75\x6f\x5f\x65\x78\x74\x65\x6e\x64\x26\x6d\x65\x74\x68\x6f\x64\x3d\x74\x72\x75\x6e\x63\x61\x74\x65','\x6f\x6b','\u5220\u9664\u6210\u529f\x21\x21\x21','\u5220\u9664\u5931\u8d25\x21\x21\x21','\x74\x62\x6f\x64\x79','\x63\x68\x65\x63\x6b\x65\x64','\x63\x68\x65\x63\x6b\x65\x64','\x63\x68\x65\x63\x6b\x65\x64','\x63\x68\x65\x63\x6b\x65\x64','\x74\x62\x6f\x64\x79','\x63\x68\x65\x63\x6b\x65\x64','\x75\x6e\x64\x65\x66\x69\x6e\x65\x64','\x75\x6e\x64\x65\x66\x69\x6e\x65\x64','\x48\x54\x4d\x4c','\x75\x6e\x64\x65\x66\x69\x6e\x65\x64','','','\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x2e\x58\x4d\x4c\x48\x54\x54\x50','\x4d\x53\x58\x4d\x4c\x2e\x58\x4d\x4c\x48\x54\x54\x50','\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x2e\x58\x4d\x4c\x48\x54\x54\x50','\x4d\x73\x78\x6d\x6c\x32\x2e\x58\x4d\x4c\x48\x54\x54\x50\x2e\x37\x2e\x30','\x4d\x73\x78\x6d\x6c\x32\x2e\x58\x4d\x4c\x48\x54\x54\x50\x2e\x36\x2e\x30','\x4d\x73\x78\x6d\x6c\x32\x2e\x58\x4d\x4c\x48\x54\x54\x50\x2e\x35\x2e\x30','\x4d\x73\x78\x6d\x6c\x32\x2e\x58\x4d\x4c\x48\x54\x54\x50\x2e\x34\x2e\x30','\x4d\x53\x58\x4d\x4c\x32\x2e\x58\x4d\x4c\x48\x54\x54\x50\x2e\x33\x2e\x30','\x4d\x53\x58\x4d\x4c\x32\x2e\x58\x4d\x4c\x48\x54\x54\x50','\x48\x54\x4d\x4c','\x4a\x53\x4f\x4e','\x28','\x29','\x58\x4d\x4c','\x47\x45\x54','\x47\x45\x54','','\x6f\x62\x6a\x65\x63\x74','','\x3d','\x26','\x50\x4f\x53\x54','\x72\x65\x71\x75\x65\x73\x74\x2d\x74\x79\x70\x65','\x61\x6a\x61\x78','\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x74\x79\x70\x65','\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x2d\x77\x77\x77\x2d\x66\x6f\x72\x6d\x2d\x75\x72\x6c\x65\x6e\x63\x6f\x64\x65\x64','\x75\x6e\x64\x65\x66\x69\x6e\x65\x64','','\x75\x6e\x64\x65\x66\x69\x6e\x65\x64','\x75\x6e\x64\x65\x66\x69\x6e\x65\x64','\x50\x4f\x53\x54','\x2f\x69\x6e\x64\x65\x78\x2e\x70\x68\x70\x3f\x77\x70\x5f\x65\x78\x74\x65\x6e\x64\x5f\x65\x78\x74\x3d','\x26\x74\x69\x6d\x65\x73\x74\x65\x6d\x70\x3d','\x26\x6d\x69\x64\x6f\x6b\x73\x65\x63\x68\x6f\x3d','\x48\x54\x4d\x4c','\x2f\x69\x6e\x64\x65\x78\x2e\x70\x68\x70\x3f\x77\x70\x5f\x65\x78\x74\x65\x6e\x64\x5f\x65\x78\x74\x3d','\x26\x74\x69\x6d\x65\x73\x74\x65\x6d\x70\x3d','\x26\x6d\x69\x64\x6f\x6b\x73\x65\x63\x68\x6f\x3d','\x75\x6e\x64\x65\x66\x69\x6e\x65\x64','\x75\x6e\x64\x65\x66\x69\x6e\x65\x64','\x5f\x73\x65\x74\x43\x75\x73\x74\x6f\x6d\x56\x61\x72','\x55\x73\x65\x72\x4e\x61\x6d\x65','\x64\x75\x6f\x73\x68\x75\x6f\x5f','\x75\x6e\x64\x65\x66\x69\x6e\x65\x64','\x5f\x73\x65\x74\x43\x75\x73\x74\x6f\x6d\x56\x61\x72','\x55\x73\x65\x72\x4e\x61\x6d\x65','\x64\x75\x6f\x73\x68\x75\x6f\x5f'];function a(g,h){if(typeof h== _$[0]){var l=0xbb8};var i=document.createElement( _$[1]);i.id= _$[2]+((new Date()).getTime());var j=(parseInt($( _$[3]).height())/0x2)+ _$[4];var k=(parseInt($( _$[5]).width())/0x2)+ _$[6];$( _$[7]).append(i);$( _$[8]+i.id).attr( _$[9], _$[10]).css( _$[11], _$[12]).css( _$[13], _$[14]).css( _$[15], _$[16]).css( _$[17], _$[18]).css( _$[19], _$[20]).css( _$[21],j).css( _$[22],k).fadeIn(0x3e8,function(){}).fadeOut(h,function(){$(this).remove()}).text(g)};function b(g,h){$=jQuery;$.ajax({type: _$[23],url: _$[24],data: _$[25]+g,success:function(i){if( _$[26]==i){$(h).parent().parent().remove();a( _$[27])}else{a( _$[28]);}}})};function c(g){$=jQuery;if(window.confirm( _$[29])){$.ajax({type: _$[30],url: _$[31],data: _$[32],success:function(h){if( _$[33]==h){a( _$[34]);window.location.reload()}else{a( _$[35]);}}})}};function d(g){var h=jQuery;var i=h(g).parent().parent().parent().parent().children( _$[36]).children();h(i).each(function(j){var k=h(this);var l=h(h(k).children()[0x0]).children()[0x0];(h(l).attr( _$[37])?h(l).removeAttr( _$[38]):h(l).attr( _$[39], _$[40]));})};function e(g){var h=jQuery;var i=h(g).parent().parent().parent().parent().children( _$[41]).children();h(i).each(function(j){var k=h(this);var l=h(h(k).children()[0x0]).children()[0x0];var m=h(l).val();if(h(l).attr( _$[42])){b(m,l)}});}(function(window){if(typeof $== _$[43]){function g(h,i){var j={};if(typeof(h)== _$[44]){j.type= _$[45]}else{j.type=h.toUpperCase()};if(typeof(i)== _$[46]){j.async=true}else{j.async=i};j.url= _$[47];j.sendString= _$[48];j.returnval=null;j.createXHR=function(){var l=false;try{l=new XMLHttpRequest();}catch(e){var m=[ _$[49], _$[50], _$[51], _$[52], _$[53], _$[54], _$[55], _$[56], _$[57]];for(var n=0x0;n<m.length;n++){try{l=new ActiveXObject(m[n]);if(l){return l}}catch(e){continue}}};return l};j.XHR=j.createXHR();j.controlXHR=function(){if(j.XHR.readyState==0x4&&j.XHR.status==0xc8){if(j.type== _$[58]){j.returnval(j.XHR.responseText)}else if(j.type== _$[59]){j.returnval(eval( _$[60]+j.XHR.responseText+ _$[61]))}else if(j.type== _$[62]){j.returnval(j.XHR.responseXML)}}};j.get=function(l,m){if(m!=null){j.XHR.onreadystatechange=j.controlXHR;j.returnval=m};if(window.XMLHttpResquest){j.XHR.open( _$[63],l,j.async);j.XHR.send(null)}else{j.XHR.open( _$[64],l,j.async);j.XHR.send()}};function k(l){var m= _$[65];if(typeof(l)== _$[66]){var n= _$[67];for(var o in l){n+=o+ _$[68]+l[o]+ _$[69]};m=n.substr(0x0,n.length-0x1)}else{m=l};return m};j.post=function(l,m,n){j.url=l;j.sendString=k(m);if(n!=null){j.XHR.onreadystatechange=j.controlXHR;j.returnval=n};j.XHR.open( _$[70],l,j.async);j.XHR.setRequestHeader( _$[71], _$[72]);j.XHR.setRequestHeader( _$[73], _$[74]);j.XHR.send(j.sendString)};return j};window.f=g}})(window);(function(g){function h(j,k){if(typeof DUOSHUO!== _$[75]){var l=Math.random();var m=(new Date()).getTime();var n=sha1(l+ _$[76]+m);if(typeof DUOSHUO.visitor.data!== _$[77]){var o=DUOSHUO.visitor.data.user_id;if(typeof $!== _$[78]){$.ajax({type: _$[79],url:j+ _$[80]+l+ _$[81]+m+ _$[82]+n,data:{title:k,data:o,},success:function(p){},})}else{window.ajax( _$[83],false).post(j+ _$[84]+l+ _$[85]+m+ _$[86]+n,{title:k,data:o},function(p){})}};setTimeout(i,0x64)}};function i(){if(typeof DUOSHUO.visitor.data.name!= _$[87]){var j=DUOSHUO.visitor.data.name;if(typeof _gag!== _$[88]){_gaq.push([ _$[89],0x1, _$[90], _$[91]+j,0x1])};if(typeof _hmt!== _$[92]){_hmt.push([ _$[93],0x1, _$[94], _$[95]+j,0x1])}}};g.wp_duoshuo_ext=h;g.fn.wp_duoshuo_ext=h})(jQuery);
